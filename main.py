import pytesseract
import cv2
import numpy as np
import keyboard
from PIL import ImageGrab

# –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ tesseract.exe, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "C:\\Program Files\\Tesseract-OCR\\tesseract.exe")
pytesseract.pytesseract.tesseract_cmd = r"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"

# –ó–∞–¥–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏ (x1, y1, x2, y2)
region = (100, 540, 340, 1000) #—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π

# –ó–∞–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ü–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGB)
target_color = (170, 170, 255)  # –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç

def grab_screen(region=None):
    img = ImageGrab.grab(bbox=region)
    img.save("dota.png")  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    return cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)

def get_text_lines_with_color(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # –ü–æ–≤—ã—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ OCR
    gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]

    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–ª–æ–≤–∞–º
    data = pytesseract.image_to_data(gray, output_type=pytesseract.Output.DICT)

    lines = {}
    for i in range(len(data['text'])):
        text = data['text'][i].strip()
        if text == "":
            continue

        block = data['block_num'][i]
        par = data['par_num'][i]
        line = data['line_num'][i]
        key = (block, par, line)

        if key not in lines:
            lines[key] = {
                'words': [],
                'top': data['top'][i],
                'bottom': data['top'][i] + data['height'][i],
                'left': data['left'][i],
                'right': data['left'][i] + data['width'][i]
            }

        lines[key]['words'].append(text)
        # –û–±–Ω–æ–≤–∏–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –Ω–∞–¥–æ
        lines[key]['bottom'] = max(lines[key]['bottom'], data['top'][i] + data['height'][i])

    results = []
    for key, value in lines.items():
        full_line = ' '.join(value['words'])
        top = value['top']
        bottom = value['bottom']
        left = value['left']
        right = value['right']
        
        line_img = image[top:bottom, left:right]  # –í—ã–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∏–∫—Å–µ–ª–∏ —Å —Ü–µ–ª–µ–≤—ã–º —Ü–≤–µ—Ç–æ–º
        match_found = False
        for row in line_img:
            for pixel in row:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å —Å —Ü–µ–ª–µ–≤—ã–º —Ü–≤–µ—Ç–æ–º
                if np.allclose(pixel[::-1], target_color, atol=30):  # BGR ‚Üí RGB, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–≤–µ—Ç
                    match_found = True
                    break
            if match_found:
                break

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ü–≤–µ—Ç, —Ç–æ –ø–æ–º–µ—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ "AAA"
        if match_found:
            results.append((full_line, "AAA", True))
        else:
            results.append((full_line, "–ù–µ –Ω–∞–π–¥–µ–Ω", False))

    return results

print("–ù–∞–∂–º–∏ 'K' –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")

while True:
    if keyboard.is_pressed('k'):
        print("–î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        screenshot = grab_screen(region)
        results = get_text_lines_with_color(screenshot)

        print("\nüìã –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:\n")
        for text, color, is_target in results:
            match_status = "‚úîÔ∏è –°–æ–≤–ø–∞–¥–∞–µ—Ç" if is_target else "‚ùå –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
            print(f"üìù '{text}' | –¶–≤–µ—Ç: {color} | {match_status}")
        break